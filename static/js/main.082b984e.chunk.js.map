{"version":3,"sources":["Swiper.js","Game.js","StartScreen.js","App.js","registerServiceWorker.js","index.js"],"names":["Swiper","touchStartX","touchStartY","touchCurrX","touchCurrY","touchStart","event","_event$touches$","touches","clientX","clientY","_this","touchMove","_event$touches$2","touchEnd","deltaX","deltaY","swipe","Math","abs","props","react_default","a","createElement","className","this","onTouchStart","onTouchMove","onTouchEnd","children","Component","WIDTH","HEIGHT","Heading","_ref","score","Game","state","snake","x","floor","random","y","direction","food","gameState","timer","swipeDirection","setState","isSnake","find","point","getBlockColor","returnToStart","gameover","_this2","setInterval","newState","Object","objectSpread","head","assign","clearInterval","newFood","concat","toConsumableArray","slice","length","interval","_this3","rows","Array","fill","src_Swiper","Game_Heading","map","row","cell","debug","JSON","stringify","onClick","StartScreen","startGame","highScore","App","screen","highscore","gameOver","max","localStorage","setItem","getItem","src_StartScreen_0","src_Game_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ontouchmove","e","preventDefault"],"mappings":"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","file":"static/js/main.082b984e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Swiper extends Component {\n  touchStartX = 0;\n  touchStartY = 0;\n  touchCurrX = 0;\n  touchCurrY = 0;\n\n  touchStart = event => {\n    let { clientX, clientY } = event.touches[0];\n    this.touchStartX = clientX;\n    this.touchStartY = clientY;\n  };\n\n  touchMove = event => {\n    let { clientX, clientY } = event.touches[0];\n    this.touchCurrX = clientX;\n    this.touchCurrY = clientY;\n  };\n\n  touchEnd = event => {\n    let deltaX = this.touchCurrX - this.touchStartX;\n    let deltaY = this.touchCurrY - this.touchStartY;\n\n    let swipe = \"none\";\n\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      swipe = deltaX < 0 ? \"left\" : \"right\";\n    } else {\n      swipe = deltaY < 0 ? \"up\" : \"down\";\n    }\n\n    this.props.swipe(swipe);\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        onTouchStart={this.touchStart}\n        onTouchMove={this.touchMove}\n        onTouchEnd={this.touchEnd}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Swiper;\n","import React, { Component } from \"react\";\nimport \"./Game.css\";\nimport Swiper from \"./Swiper\";\n\nconst WIDTH = 9 * 4;\nconst HEIGHT = 16 * 4;\n\nconst Heading = ({ score }) => (\n  <div className=\"heading\">\n    <p>Score: {score}</p>\n  </div>\n);\n\nclass Game extends Component {\n  state = {\n    snake: [\n      {\n        x: Math.floor(Math.random() * WIDTH),\n        y: Math.floor(Math.random() * HEIGHT)\n      }\n    ],\n    direction: \"up\",\n    food: {\n      x: Math.floor(Math.random() * WIDTH),\n      y: Math.floor(Math.random() * HEIGHT)\n    },\n    score: 0,\n    gameState: \"running\"\n  };\n  timer = null;\n\n  swipe = swipeDirection => {\n    switch (swipeDirection) {\n      case \"up\":\n        if (this.state.direction !== \"down\") {\n          this.setState({ direction: swipeDirection });\n        }\n        break;\n      case \"down\":\n        if (this.state.direction !== \"up\") {\n          this.setState({ direction: swipeDirection });\n        }\n        break;\n      case \"left\":\n        if (this.state.direction !== \"right\") {\n          this.setState({ direction: swipeDirection });\n        }\n        break;\n      case \"right\":\n        if (this.state.direction !== \"left\") {\n          this.setState({ direction: swipeDirection });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      let newState = { ...this.state };\n      let head = Object.assign({}, this.state.snake[0]);\n\n      switch (this.state.direction) {\n        case \"up\":\n          head.y = (head.y - 1 + HEIGHT) % HEIGHT;\n          break;\n        case \"right\":\n          head.x = (head.x + 1) % WIDTH;\n          break;\n        case \"down\":\n          head.y = (head.y + 1) % HEIGHT;\n          break;\n        case \"left\":\n          head.x = (head.x - 1 + WIDTH) % WIDTH;\n          break;\n        default:\n          break;\n      }\n\n      if (this.isSnake(head.x, head.y)) {\n        clearInterval(this.timer);\n        this.setState({ gameState: \"gameover\" });\n        return;\n      }\n\n      let newFood = false;\n      if (head.x === newState.food.x && head.y === newState.food.y) {\n        newFood = true;\n        newState.snake = [head, ...newState.snake];\n      } else {\n        newState.snake = [\n          head,\n          ...newState.snake.slice(0, newState.snake.length - 1)\n        ];\n      }\n\n      if (newFood) {\n        do {\n          newState.food.x = Math.floor(Math.random() * WIDTH);\n          newState.food.y = Math.floor(Math.random() * HEIGHT);\n        } while (this.isSnake(newState.food.x, newState.food.y));\n        newState.score++;\n      }\n\n      this.setState(newState);\n    }, this.props.interval);\n  }\n\n  isSnake = (x, y) =>\n    this.state.snake.find(point => point.x === x && point.y === y);\n\n  getBlockColor = (x, y) => {\n    if (this.isSnake(x, y)) {\n      return \" snake\";\n    } else if (x === this.state.food.x && y === this.state.food.y) {\n      return \" food\";\n    } else {\n      return \"\";\n    }\n  };\n\n  returnToStart = () => {\n    this.props.gameover(this.state.score);\n  };\n\n  render() {\n    let rows = Array(HEIGHT).fill(Array(WIDTH).fill(0));\n\n    return (\n      <Swiper className=\"Game\" swipe={this.swipe}>\n        <Heading score={this.state.score} />\n        {rows.map((row, y) => (\n          <div className=\"row\">\n            {row.map((cell, x) => (\n              <div className={\"block\" + this.getBlockColor(x, y)} />\n            ))}\n          </div>\n        ))}\n        {this.props.debug && <pre>{JSON.stringify(this.state, null, 2)}</pre>}\n        {this.state.gameState === \"gameover\" && (\n          <h1 className=\"overlay\" onClick={this.returnToStart}>\n            Game over\n          </h1>\n        )}\n      </Swiper>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./StartScreen.css\";\n\nconst StartScreen = ({ startGame, highScore }) => (\n  <div className=\"StartScreen\">\n    <h1>Snakes on a Phone</h1>\n    <p>High Score: {highScore}</p>\n    <button onClick={startGame}>Start</button>\n  </div>\n);\n\nexport default StartScreen;\n","import React, { Component } from \"react\";\nimport Game from \"./Game\";\nimport StartScreen from \"./StartScreen\";\n\nclass App extends Component {\n  state = { screen: \"start\", highscore: 0 };\n\n  componentDidMount() {\n    this.setState({ highscore: localStorage.getItem(\"highscore\") || 0 });\n  }\n\n  startGame = () => this.setState({ screen: \"game\" });\n\n  gameOver = score => {\n    let highscore = Math.max(score, this.state.highscore);\n    this.setState({ screen: \"start\", highscore });\n    localStorage.setItem(\"highscore\", highscore);\n  };\n\n  render() {\n    switch (this.state.screen) {\n      default:\n      case \"start\":\n        return (\n          <StartScreen\n            startGame={this.startGame}\n            highScore={this.state.highscore}\n          />\n        );\n      case \"game\":\n        return <Game interval={100} debug={false} gameover={this.gameOver} />;\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\ndocument.ontouchmove = function(e) {\n  e.preventDefault();\n};\n"],"sourceRoot":""}